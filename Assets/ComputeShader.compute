// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;


static const float EPSILON = 1e-8;
float4x4 _EmitProjection;

float3 _LightDirection;



struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;

};
struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    int reachTarget;
};
struct MeshObject
{
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;
StructuredBuffer<int> _Types;
int _MultiSample;


Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}




Ray CreateDetectRay(float2 uv) {
    float3 origin = mul(_EmitProjection, float4(uv.x, 0.0f, uv.y, 1.0f)).xyz;
    //float3 origin = float3(0.0f,0.0f,0.0f);
    float3 direction = _LightDirection;
    //float3 direction = float3(0.0f,-1.0f,0.0f);
    return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    //hit.reachTarget = 0;
    return hit;
}

bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v)
{
    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, edge2);
    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);
    // use backface culling
    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;
    // calculate distance from vert0 to ray origin
    float3 tvec = ray.origin - vert0;
    // calculate U parameter and test bounds
    u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f)
        return false;
    // prepare to test V parameter
    float3 qvec = cross(tvec, edge1);
    // calculate V parameter and test bounds
    v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;
    // calculate t, ray intersects triangle
    t = dot(edge2, qvec) * inv_det;
    return true;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject, int index)
{
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3)
    {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;
        float t, u, v;
        if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
        {
            if (t > 0 && t < bestHit.distance)
            {
                bestHit.distance = t;
                bestHit.position = ray.origin + t * ray.direction;
                bestHit.normal = normalize(cross(v1 - v0, v2 - v0));


                if (_Types[index] == 0) {
                    bestHit.specular = float3(0.0f, 0.0f, 0.0f);
                    bestHit.reachTarget = 0;
                }
                if (_Types[index] == 1) {
                    bestHit.specular = float3(0.8f, 0.8f, 0.8f);//reflect
                    bestHit.reachTarget = 0;
                }
                if (_Types[index] == 2) {
                    bestHit.specular = float3(1.0f, 1.0f, 1.0f);//receive
                    bestHit.reachTarget = 1;
                }

            }
        }
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();

    // Trace mesh objects
    uint count, stride, i;
    _MeshObjects.GetDimensions(count, stride);
    for (i = 0; i < count; i++)
    {
        IntersectMeshObject(ray, bestHit, _MeshObjects[i], i);
    }
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {

        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;

        if (hit.reachTarget == 1) {
            // Return a  color
            return float3(1.0f, 1.0f, 1.0f);
        }
        else {
            return float3(0.0f, 0.0f, 0.0f);
        }



    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;

        return  float3(0.0f, 0.0f, 0.0f);
    }
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
        // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float3 result = float3(0, 0, 0);

    float sampleMask = 1.0f / (float)_MultiSample / (float)_MultiSample;
    for (int i = 0; i < _MultiSample; i++)
    {
        for (int j = 0; j < _MultiSample; j++)
        {

            float2 offset = float2((float)i / _MultiSample, (float)j / _MultiSample);
            //float2 offset = float2(0.5f, 0.5f);
            float2 uv = float2((id.xy + offset) / float2(width, height) * 2.0f - 1.0f);
            // Get a ray for the UVs
            Ray ray = CreateDetectRay(uv);

            // Trace and shade

            //for (int i = 0; i < 2; i++)
            //{
            //    RayHit hit = Trace(ray);
            //    result += ray.energy * Shade(ray, hit);
            //    if (!any(ray.energy))
            //        break;
            //}

            RayHit hit = Trace(ray);
            result += ray.energy * Shade(ray, hit) * float3(1.0f, 0.0f, 0.0f) * sampleMask;

            hit = Trace(ray);
            result += ray.energy * Shade(ray, hit) * float3(0.0f, 1.0f, 0.0f) * sampleMask;
        }

    }



    Result[id.xy] = float4(result, 1);

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
